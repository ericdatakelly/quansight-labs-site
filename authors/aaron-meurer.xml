<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs (Posts by Aaron Meurer)</title><link>https://labs.quansight.org/</link><description></description><atom:link href="https://labs.quansight.org/authors/aaron-meurer.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Mon, 12 Jul 2021 10:45:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Design of the Versioned HDF5 Library</title><link>https://labs.quansight.org/blog/2020/09/design-of-the-versioned-hdf5-library/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;In a &lt;a href="https://labs.quansight.org/blog/2020/08/introducing-versioned-hdf5/"&gt;previous
post&lt;/a&gt;, we
introduced the Versioned HDF5 library and described some of its features. In
this post, we'll go into detail on how the underlying design of the library
works on a technical level.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/09/design-of-the-versioned-hdf5-library/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>h5py</category><category>HDF5</category><guid>https://labs.quansight.org/blog/2020/09/design-of-the-versioned-hdf5-library/</guid><pubDate>Tue, 29 Sep 2020 16:00:00 GMT</pubDate></item><item><title>Introducing ndindex, a Python library for manipulating indices of ndarrays</title><link>https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the most important features of NumPy arrays is their indexing
semantics. By "indexing" I mean anything that happens inside square brackets,
for example, &lt;code&gt;a[4::-1, 0, ..., [0, 1], np.newaxis]&lt;/code&gt;. NumPy's index semantics
are very expressive and powerful, and this is one of the reasons the library
is so popular.&lt;/p&gt;
&lt;p&gt;Index objects can be represented and manipulated directly. For example, the
above index is &lt;code&gt;(slice(4, None, -1), 0, Ellipsis, [0, 1], None)&lt;/code&gt;. If you are
any author of a library that tries to replicate NumPy array semantics, you
will have to work with these objects. However, they are often difficult to
work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The different types that are valid indices for NumPy arrays do not have a
uniform API. Most of the types are also standard Python types, such as
&lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;, which are usually unrelated to indexing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those objects that are specific to indexes, such as &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;Ellipsis&lt;/code&gt;
do not make any assumptions about their underlying semantics. For example,
Python lets you create &lt;code&gt;slice(None, None, 0)&lt;/code&gt; or &lt;code&gt;slice(0, 0.5)&lt;/code&gt; even though
&lt;code&gt;a[::0]&lt;/code&gt; and &lt;code&gt;a[0:0.5]&lt;/code&gt; would be always be an &lt;code&gt;IndexError&lt;/code&gt; on a NumPy array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some index objects, such as &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;ndarray&lt;/code&gt; are not hashable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NumPy itself does not offer much in the way of helper functions to work with
these objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These limitations may be annoying, but are easy enough to live with. The real
challenge when working with indices comes when you try to manipulate them.
Slices in particular are challenging to work with because the rich meaning of
slice semantics. Writing formulas for even very simple things is a real
challenge with slices. &lt;code&gt;slice(start, stop, step)&lt;/code&gt; (corresponding to
&lt;code&gt;a[start:stop:step]&lt;/code&gt;) has fundamentally different meaning depending on whether
&lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;, or &lt;code&gt;step&lt;/code&gt; are negative, nonnegative, or &lt;code&gt;None&lt;/code&gt;. As an example,
take &lt;code&gt;a[4:-2:-2]&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is a one-dimensional array. This slices every
other element from the third element to the second from the last. What will
the shape of this sliced array be? The answer is &lt;code&gt;(0,)&lt;/code&gt; if the original shape
is less than 1 or greater than 5, and &lt;code&gt;(1,)&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;Code that manipulates slices will tend to have a lot of &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; chains for
these different cases. And due to 0-based indexing, half-open semantics,
wraparound behavior, clipping, and step logic, the formulas are often quite
difficult to write down.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ndindex</category><category>NumPy</category><guid>https://labs.quansight.org/blog/2020/04/introducing-ndindex-a-python-library-for-manipulating-indices-of-ndarrays/</guid><pubDate>Mon, 20 Apr 2020 05:00:00 GMT</pubDate></item><item><title>Quansight Labs Work Update for September, 2019</title><link>https://labs.quansight.org/blog/2019/10/quansight-labs-work-update-for-september-2019/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;. Quansight is a new startup founded by
the same people who started Anaconda, which aims to connect companies and open
source communities, and offers consulting, training, support and mentoring
services. I work under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow.&lt;/p&gt;
&lt;p&gt;My work at Quansight is split between doing open source consulting for various
companies, and working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;In this post, I will detail some of the open source work that I have done
recently, both as part of my open source consulting, and as part of my work on
SymPy for Quansight Labs.&lt;/p&gt;
&lt;h3&gt;Bounds Checking in Numba&lt;/h3&gt;
&lt;p&gt;As part of work on a client project, I have been working on contributing code
to the &lt;a href="https://numba.pydata.org"&gt;numba&lt;/a&gt; project. Numba is a just-in-time
compiler for Python. It lets you write native Python code and with the use of
a simple &lt;code&gt;@jit&lt;/code&gt; decorator, the code will be automatically sped up using LLVM.
This can result in code that is up to 1000x faster in some cases:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/10/quansight-labs-work-update-for-september-2019/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://labs.quansight.org/blog/2019/10/quansight-labs-work-update-for-september-2019/</guid><pubDate>Mon, 07 Oct 2019 05:00:00 GMT</pubDate></item><item><title>What's New in SymPy 1.4</title><link>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;As of November, 2018, I have been working at
&lt;a href="https://www.quansight.com/"&gt;Quansight&lt;/a&gt;, under the heading of &lt;a href="https://www.quansight.com/labs"&gt;Quansight
Labs&lt;/a&gt;. Quansight Labs is a public-benefit
division of Quansight. It provides a home for a "PyData Core Team" which
consists of developers, community managers, designers, and documentation
writers who build open-source technology and grow open-source communities
around all aspects of the AI and Data Science workflow. As a part of this, I
am able to spend a fraction of my time working on SymPy.
&lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, for those who do not know, is a
symbolic mathematics library written in pure Python. I am the lead maintainer
of SymPy.&lt;/p&gt;
&lt;p&gt;SymPy 1.4 was released on April 9, 2019. In this post, I'd like to go over
some of the highlights for this release. The full release notes for the
release can be found on the &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4"&gt;SymPy
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To update to SymPy 1.4, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda install sympy
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;or if you prefer to use pip&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -U sympy
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The SymPy 1.4 release contains over &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;500 changes from 38 different
submodules&lt;/a&gt;,
so I will not be going over every change, but only a few of the main
highlights. A &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.4#authors"&gt;total of 104
people&lt;/a&gt;
contributed to this release, of whom 66 contributed for the first time for
this release.&lt;/p&gt;
&lt;p&gt;While I did not personally work on any of the changes listed below (my work
for this release tended to be more invisible, behind the scenes fixes), I did
do the release itself.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Labs</category><category>sympy</category><guid>https://labs.quansight.org/blog/2019/04/whats-new-in-sympy-14/</guid><pubDate>Thu, 02 May 2019 05:00:00 GMT</pubDate></item></channel></rss>