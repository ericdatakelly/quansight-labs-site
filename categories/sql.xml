<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quansight Labs (Posts about SQL)</title><link>https://labs.quansight.org/</link><description></description><atom:link href="https://labs.quansight.org/categories/sql.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:info@quansight.com"&gt;Quansight Labs Team&lt;/a&gt; </copyright><lastBuildDate>Fri, 09 Jul 2021 10:45:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Querying multiple backends with Ibis</title><link>https://labs.quansight.org/blog/2020/11/the-ibis-backends/</link><dc:creator>Tony Fast, Kim Pevey</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://labs.quansight.org/blog/2020/06/ibis-an-idiomatic-flavor-of-sql-for-python-programmers/"&gt;our recent Ibis post&lt;/a&gt;, we discussed querying &amp;amp; retrieving data using a familiar &lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;-like interface.
That discussion focused on the fluent API that &lt;a href="https://www.ibis-project.org/"&gt;Ibis&lt;/a&gt; provides to query structure from a SQLite database—in particular, using a single specific backend.
In this post, we'll explore Ibis's ability to answer questions about data using two different Ibis backends.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ibis.omniscidb&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;dask&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;intake&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;pyarrow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;altair&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;h5py&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;hdf5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Ibis in the scientific Python ecosystem&lt;/h3&gt;
&lt;p&gt;Before we delve into the technical details of using Ibis, we'll consider Ibis in the greater historical context of the scientific Python ecosystem. It was started by Wes McKinney, the creator of Pandas, as way to query information on
the &lt;a href="https://en.wikipedia.org/wiki/Apache_Hadoop#HDFS"&gt;Hadoop distributed file system&lt;/a&gt; and &lt;a href="https://pypi.org/project/pyspark/"&gt;PySpark&lt;/a&gt;. More backends were added later as Ibis became a general tool for data queries.&lt;/p&gt;
&lt;p&gt;Throughout the rest of this post, we'll highlight the ability of Ibis to generically prescribe
query expressions across different data storage systems.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://labs.quansight.org/blog/2020/11/the-ibis-backends/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Ibis</category><category>OmniSci</category><category>Pandas</category><category>SQL</category><guid>https://labs.quansight.org/blog/2020/11/the-ibis-backends/</guid><pubDate>Fri, 13 Nov 2020 06:00:00 GMT</pubDate></item></channel></rss>